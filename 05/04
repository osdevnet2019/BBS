&  Bitwise AND
|  Bitwise OR
^  Bitwise XOR
~  Bitwise complement
<<  Shift left
>>  Shift right


a = 01100001
A = 01000001
      ^


a = 01100001    A = 01000001
b = 01100010    B = 01000010
c = 01100011    C = 01000011
d = 01100100    D = 01000100
e = 01100101    E = 01000101
f = 01100110    F = 01000110
g = 01100111    G = 01000111
h = 01101000    H = 01001000
i = 01101001    I = 01001001
j = 01101010    J = 01001010
k = 01101011    K = 01001011
l = 01101100    L = 01001100
m = 01101101    M = 01001101
n = 01101110    N = 01001110
o = 01101111    O = 01001111
p = 01110000    P = 01010000
q = 01110001    Q = 01010001
r = 01110010    R = 01010010
s = 01110011    S = 01010011
t = 01110100    T = 01010100
u = 01110101    U = 01010101
v = 01110110    V = 01010110
w = 01110111    W = 01010111
x = 01111000    X = 01011000
y = 01111001    Y = 01011001
z = 01111010    Z = 01011010

AND


12 = 00001100 (In Binary)
25 = 00011001 (In Binary)

Bit Operation of 12 and 25
  00001100
& 00011001
  ________
  00001000  = 8 (In decimal)


    #include <stdio.h>
    int main()
    {
        int a = 12, b = 25;
        printf("Output = %d", a&b);
        return 0;
    }


OR

12 = 00001100 (In Binary)
25 = 00011001 (In Binary)

Bitwise OR Operation of 12 and 25
  00001100
| 00011001
  ________
  00011101  = 29 (In decimal)



    #include <stdio.h>
    int main()
    {
        int a = 12, b = 25;
        printf("Output = %d", a|b);
        return 0;
    }


XOR

12 = 00001100 (In Binary)
25 = 00011001 (In Binary)

Bitwise XOR Operation of 12 and 25
  00001100
^ 00011001
  ________
  00010101  = 21 (In decimal)

Example #3: Bitwise XOR

    #include <stdio.h>
    int main()
    {
        int a = 12, b = 25;
        printf("Output = %d", a^b);
        return 0;
    }









Let suppose, you want to check Nth bit of a Number NUM, you can do the same by following this syntax:

(NUM & (1<<N))

Here, NUM is the number whose bit you want to check and N is the bit number, (1<<N) SET the particular bit at Nth position.




------------------

#include <stdio.h>

int main()
{
 int NUM; //to store number
 int N; //to store bit

 printf("Enter an 8 bits integer number: ");
 scanf("%d",&NUM);
 printf("Now, enter a bit number (from 0 to 7) to check, whether it is SET or not: ");
 scanf("%d",&N);

 //checking bit status
 if(NUM & (1<<N))
  printf("Bit number %d is SET in number %d.\n",N,NUM);
 else
  printf("Bit number %d is not SET in number %d.\n",N,NUM);

 return 0;
}
-----------------------
